% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/AIest.R
\name{AIest}
\alias{AIest}
\title{Attraction Index}
\usage{
AIest(
  pp,
  correction = "Ripley",
  r = NULL,
  dim = NULL,
  dim_lims = NULL,
  rmax = NULL,
  nlarge = 3000
)
}
\arguments{
\item{pp}{The observed point pattern, from which an estimate of AI(r) will be computed.
An object of class "ppp", or data in any format acceptable to as.ppp().}

\item{correction}{Optional. A character vector containing one and only one of
the options "none", "border", "bord.modif", "isotropic", "Ripley", "translate",
"translation", "rigid", "none", "periodic", "good" or "best".
It specifies the edge correction to be applied. Note that the option "all"
or providing multiple edge correction methods is not supported due to
performance reasons. Defaults to "Ripley".}

\item{r}{Optional. Vector of values for the argument r at which AI(r)
should be evaluated. The values must be in increasing order. Advanced use only.}

\item{dim}{Optional. The dimension of the basis used to represent the smooth term within
the scam model formula. If not provided, the rule of thumb is used, i.e.
dim = sqrt(number of points).}

\item{dim_lims}{Optional. The integer vector with 2 values: the lower and
upper limits of the possible value of dim, c(lower, upper). lower > upper
is not allowed.}

\item{rmax}{Optional. Maximum desired value of the argument.}

\item{nlarge}{Optional. Efficiency threshold. If the number of points exceeds
nlarge, then only the border correction will be computed (by default),
using a fast algorithm.}
}
\value{
An object of class "aifv", inherited from fv.object, which can be
plotted directly using plot.aifv.
}
\description{
Estimates the Attraction Index function from a point pattern in a window of arbitrary shape.
}
\examples{

library(spatstat.random)

# AI for a random point pattern
rpp <- rpoispp(500)

ai_rand <- AIest(rpp)
plot(ai_rand, main = "AI for a random point pattern")

ai <- AIest(rpp, "border")
plot(ai, main = "AI for a random point pattern")

# AI for a clustered point pattern
clust_pp <- rMatClust(20, 0.05, 25)

ai_clust <- AIest(clust_pp)
plot(ai_clust, main = "AI for a clustered point pattern")

# AI for a point pattern with dispersion
hardcore_pp <- rHardcore(300, R=0.05)
ai_disp <- AIest(hardcore_pp)
plot(ai_disp, main = "AI for a point pattern with dispersion")

# Plot AI for three different point pattern together
plot(ai_rand$r, ai_rand$iso, type="l", ylim=c(-1, 1), col=4)
lines(ai_rand$r, rep(0, nrow(ai_rand)), lty=2)
lines(ai_clust$r, ai_clust$iso, col=2)
lines(ai_disp$r, ai_disp$iso, col=7)
legend("bottomright",
       c("theoretical", "random", "clustered", "dispersed"),
       col=c(1, 4, 2, 7),
       lty=c(2, 1, 1, 1))

}
