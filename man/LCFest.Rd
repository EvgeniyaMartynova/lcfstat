% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/LCFest.R
\name{LCFest}
\alias{LCFest}
\title{Local Correlation Function}
\usage{
LCFest(
  pp,
  correction = "Ripley",
  r = NULL,
  dim = NULL,
  dim_lims = NULL,
  rmax = NULL,
  nlarge = 3000
)
}
\arguments{
\item{pp}{The observed point pattern, from which an estimate of LCF(r) will be computed
or N(r) estimate. In case of the point pattern, it should be an object of class "ppp",
or data in any format acceptable to as.ppp(). For N(r), a data frame with columns
"r" (distance) and "pn" (estimated number of points)}

\item{correction}{Optional. A character vector containing one and only one of
the options "none", "border", "bord.modif", "isotropic", "Ripley", "translate",
"translation", "rigid", "none", "periodic", "good" or "best".
It specifies the edge correction to be applied. Note that the option "all"
or providing multiple edge correction methods is not supported due to
performance reasons. Defaults to "Ripley".}

\item{r}{Optional. Vector of values for the argument r at which LCF(r)
should be evaluated. The values must be in increasing order. Advanced use only.}

\item{dim}{Optional. The dimension of the basis used to represent the smooth term within
the scam model formula. If not provided, the rule of thumb is used, i.e.
dim = sqrt(number of points).}

\item{dim_lims}{Optional. The integer vector with 2 values: the lower and
upper limits of the possible value of dim, c(lower, upper). lower > upper
is not allowed.}

\item{rmax}{Optional. Maximum desired value of the argument.}

\item{nlarge}{Optional. Efficiency threshold. If the number of points exceeds
nlarge, then only the border correction will be computed (by default),
using a fast algorithm.}
}
\value{
An object of class "lcffv", inherited from fv.object, which can be
plotted directly using plot.lcffv.
}
\description{
Estimates the local correlation function function from a point pattern in a window of arbitrary shape.
}
\examples{

library(spatstat.random)

# LCF for a random point pattern
rpp <- rpoispp(500)

lcf_rand <- LCFest(rpp)
plot(lcf_rand, main = "LCF for a random point pattern")

lcf <- LCFest(rpp, "border")
plot(lcf, main = "LCF for a random point pattern")

# LCF for a clustered point pattern
clust_pp <- rMatClust(20, 0.05, 25)

lcf_clust <- LCFest(clust_pp)
plot(lcf_clust, main = "LCF for a clustered point pattern")

# LCF for a point pattern with dispersion
hardcore_pp <- rHardcore(300, R=0.05)
lcf_disp <- LCFest(hardcore_pp)
plot(lcf_disp, main = "LCF for a point pattern with dispersion")

# Plot LCF for three different point pattern together
plot(lcf_rand$r, lcf_rand$iso, type="l", ylim=c(-1, 1), col=4)
lines(lcf_rand$r, rep(0, nrow(lcf_rand)), lty=2)
lines(lcf_clust$r, lcf_clust$iso, col=2)
lines(lcf_disp$r, lcf_disp$iso, col=7)
legend("bottomright",
       c("theoretical", "random", "clustered", "dispersed"),
       col=c(1, 4, 2, 7),
       lty=c(2, 1, 1, 1))

}
